---
openapi: 3.1.0
info:
  title: CMS
  version: 0.1.0
paths:
  "/health":
    get:
      tags:
      - system
      summary: Health
      operationId: health_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/v1/auth/token":
    post:
      tags:
      - auth
      summary: Issue JWT access token
      description: |-
        Authenticates a user with email and password and returns a shortâ€‘lived JWT access token.

        ### Notes
        - Use this token in the `Authorization: Bearer <token>` header for protected endpoints.
        - The token reflects the user's active status and current roles at issuance time.
        - If credentials are invalid or the account is inactive, the server returns **401 Unauthorized**.
      operationId: issue_token_v1_auth_token_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginIn"
        required: true
      responses:
        '200':
          description: Authentication succeeded; JWT returned.
          headers:
            Cache-Control:
              description: Clients should not cache tokens.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenOut"
              examples:
                success:
                  summary: Successful login
                  value:
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid email or password, or user is inactive.
          headers:
            WWW-Authenticate:
              description: Authentication scheme required (e.g., Bearer).
              schema:
                type: string
          content:
            application/json:
              examples:
                invalid_credentials:
                  summary: Bad email/password
                  value:
                    detail: invalid_credentials
                inactive_user:
                  summary: User is inactive
                  value:
                    detail: inactive_user
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/v1/users":
    post:
      tags:
      - users
      summary: Create a new user (admin only)
      description: |-
        Creates a new user and returns the created record.

        ### Notes
        - **Admin** permissions are required (enforced by `require_admin`).
        - The returned `roles` field is an array of role names.
      operationId: create_user_v1_users_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserCreate"
        required: true
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserOut"
              examples:
                created:
                  summary: Created user
                  value:
                    id: 5d2a8c1f-6c53-4b1a-9f9a-c5f1f3e3c0d1
                    email: editor@example.com
                    is_active: true
                    roles:
                    - editor
                    created_at: '2025-08-14T20:30:15Z'
        '401':
          description: Missing/invalid credentials.
          headers:
            WWW-Authenticate:
              description: Authentication scheme (e.g., Bearer).
              schema:
                type: string
          content:
            application/json:
              examples:
                missing:
                  summary: No token
                  value:
                    detail: Not authenticated
                invalid:
                  summary: Bad token
                  value:
                    detail: Could not validate credentials
        '403':
          description: Authenticated but not authorized (admin required).
          content:
            application/json:
              examples:
                forbidden:
                  summary: Not admin
                  value:
                    detail: forbidden
        '409':
          description: Email already exists.
          content:
            application/json:
              examples:
                conflict:
                  value:
                    detail: email_exists
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
      security:
      - OAuth2PasswordBearer: []
  "/v1/users/me":
    get:
      tags:
      - users
      summary: Get my profile
      description: |-
        Returns the authenticated user's profile.

        ### Notes
        - Requires a valid `Authorization: Bearer <token>` header.
      operationId: me_v1_users_me_get
      responses:
        '200':
          description: Current user profile.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserOut"
              examples:
                me:
                  summary: Profile example
                  value:
                    id: 5d2a8c1f-6c53-4b1a-9f9a-c5f1f3e3c0d1
                    email: editor@example.com
                    is_active: true
                    roles:
                    - editor
                    created_at: '2025-08-14T20:30:15Z'
        '401':
          description: Missing/invalid credentials.
          headers:
            WWW-Authenticate:
              description: Authentication scheme (e.g., Bearer).
              schema:
                type: string
          content:
            application/json:
              examples:
                missing:
                  summary: No token
                  value:
                    detail: Not authenticated
                invalid:
                  summary: Bad token
                  value:
                    detail: Could not validate credentials
      security:
      - OAuth2PasswordBearer: []
  "/v1/users/{user_id}/roles":
    put:
      tags:
      - users
      summary: Set user roles (admin only)
      description: |-
        Replaces the user's roles with the provided list.

        ### Notes
        - **Admin** permissions required.
        - Supply an array of role assignments; roles not listed will be removed.
        - Idempotent: sending the same set multiple times results in the same state.
      operationId: set_user_roles_v1_users__user_id__roles_put
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          description: User UUID
          title: User Id
        description: User UUID
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/AssignRoleIn"
              description: List of roles to set (full replacement)
              default: []
              title: Payload
      responses:
        '200':
          description: Roles updated; the full user object is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserOut"
              examples:
                updated:
                  summary: User roles updated
                  value:
                    id: 5d2a8c1f-6c53-4b1a-9f9a-c5f1f3e3c0d1
                    email: editor@example.com
                    is_active: true
                    roles:
                    - admin
                    - editor
                    created_at: '2025-08-14T20:30:15Z'
        '401':
          description: Missing/invalid credentials.
          content:
            application/json:
              examples:
                missing:
                  summary: No token
                  value:
                    detail: Not authenticated
                invalid:
                  summary: Bad token
                  value:
                    detail: Could not validate credentials
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: Authentication scheme (e.g., Bearer).
        '403':
          description: Authenticated but not authorized (admin required).
          content:
            application/json:
              examples:
                forbidden:
                  summary: Not admin
                  value:
                    detail: forbidden
        '404':
          description: User not found.
          content:
            application/json:
              examples:
                not_found:
                  value:
                    detail: user_not_found
        '422':
          description: Validation error.
  "/v1/roles":
    get:
      tags:
      - roles
      summary: List all roles (admin only)
      description: |-
        Returns the complete list of system roles. This endpoint is **restricted to admins** via the `require_admin` dependency.

        ### Notes
        - Typical roles include `admin`, `editor`, and `viewer`.
        - Use this endpoint to populate role pickers in admin UIs.
      operationId: list_roles_v1_roles_get
      responses:
        '200':
          description: List of roles.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/RoleOut"
                type: array
                title: Response List Roles V1 Roles Get
              examples:
                example:
                  summary: Roles list
                  value:
                  - id: 8c6a3a45-2e6c-4a1a-8d8b-9c7f2b0d7a21
                    name: admin
                    created_at: '2025-08-10T12:34:56Z'
                  - id: 0b1a98e2-754a-4d63-a53c-18d3b5a0d5e1
                    name: editor
                    created_at: '2025-08-10T12:35:05Z'
                  - id: b0efc8b8-1df4-41cf-8b20-0a3f7e0f92d3
                    name: viewer
                    created_at: '2025-08-10T12:35:12Z'
        '401':
          description: Missing/invalid credentials.
          headers:
            WWW-Authenticate:
              description: Authentication scheme (e.g., Bearer).
              schema:
                type: string
          content:
            application/json:
              examples:
                missing_token:
                  summary: No token
                  value:
                    detail: Not authenticated
                invalid_token:
                  summary: Bad token
                  value:
                    detail: Could not validate credentials
        '403':
          description: Authenticated but not authorized (admin role required).
          content:
            application/json:
              examples:
                forbidden:
                  summary: Not admin
                  value:
                    detail: forbidden
        '422':
          description: Request validation error.
      security:
      - OAuth2PasswordBearer: []
  "/v1/contents":
    post:
      tags:
      - contents
      summary: Create content (staff only)
      description: |-
        Creates a new content item (podcast episode, documentary, etc.).

        **Auth:** Editors/Admins only (via `require_staff`).

        **Body shape:** validated by the domain entity in the service layer Required fields include at least `title`; optional fields include `description`, `categories`, `language`, `duration`, and `publication_date`.
      operationId: create_content_v1_contents_post
      security:
      - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              title: Payload
      responses:
        '201':
          description: Content created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentOut"
              examples:
                created:
                  summary: Created content
                  value:
                    id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                    title: 'Episode 1: Origins'
                    description: How it all started.
                    categories:
                    - documentary
                    language: ar
                    duration: 1800
                    publication_date: '2025-08-01'
                    created_at: '2025-08-14T20:12:44Z'
                    updated_at: '2025-08-14T20:12:44Z'
                    media:
                      id: 2e2e6f0f-2b83-4f1d-8c18-3f6e5b6f7fcd
                      content_id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                      media_type: video
                      source: external
                      media_provider: youtube
                      external_url: https://youtube.com/watch?v=abc123
                      created_at: '2025-08-14T20:12:44Z'
                      updated_at: '2025-08-14T20:12:44Z'
        '401':
          description: Not authenticated.
        '403':
          description: Authenticated but not authorized (staff required).
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    get:
      tags:
      - contents
      summary: List/browse contents
      description: Returns a paginated list of content items. Searches by fullâ€‘text
        (`q`) and supports filters. **Auth:** Optional. If provided, additional personalization/visibility
        may apply.
      operationId: list_contents_v1_contents_get
      parameters:
      - name: q
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Free-text search query.
          title: Q
        description: Free-text search query.
      - name: media_type
        in: query
        required: false
        schema:
          anyOf:
          - type: string
            pattern: "^(audio|video)$"
          - type: 'null'
          description: Filter by media type.
          title: Media Type
        description: Filter by media type.
      - name: category
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Filter by category (exact match).
          title: Category
        description: Filter by category (exact match).
      - name: language
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Filter by language code (e.g., `ar`, `en`).
          title: Language
        description: Filter by language code (e.g., `ar`, `en`).
      - name: status
        in: query
        required: false
        schema:
          anyOf:
          - type: string
            pattern: "^(draft|published)$"
          - type: 'null'
          description: Filter by content status.
          title: Status
        description: Filter by content status.
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          maximum: 100
          minimum: 1
          description: Page size (1â€“100).
          default: 20
          title: Limit
        description: Page size (1â€“100).
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          description: Offset for pagination.
          default: 0
          title: Offset
        description: Offset for pagination.
      responses:
        '200':
          description: List of content items (paginated via `limit`/`offset`).
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ContentOut"
                title: Response List Contents V1 Contents Get
              examples:
                list:
                  summary: List example
                  value:
                  - id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                    title: 'Episode 1: Origins'
                    description: Incredible teams
                    categories:
                    - documentary
                    - football
                    language: ar
                    duration: 1800
                    publication_date: '2025-08-01'
                    created_at: '2025-08-14T20:12:44Z'
                    updated_at: '2025-08-14T20:12:44Z'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/v1/contents/{content_id}":
    patch:
      tags:
      - contents
      summary: Update content (staff only)
      description: "Partially updates a content item.\n\n**Auth:** Editors/Admins
        only. \n\nFields are validated."
      operationId: update_content_v1_contents__content_id__patch
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentUpdate"
              description: Partial update payload
      responses:
        '200':
          description: Content updated; full object returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentOut"
        '401':
          description: Not authenticated.
        '403':
          description: Authenticated but not authorized (staff required).
        '404':
          description: Content not found.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
      - contents
      summary: Delete content (staff only)
      description: 'Deletes a content item by ID. Returns `{ "ok": true }` on success.'
      operationId: delete_content_v1_contents__content_id__delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      responses:
        '200':
          description: Deleted.
          content:
            application/json:
              schema: {}
              examples:
                ok:
                  value:
                    ok: true
        '401':
          description: Not authenticated.
        '403':
          description: Authenticated but not authorized (staff required).
        '404':
          description: Content not found.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    get:
      tags:
      - contents
      summary: Get content by ID
      description: Fetches a single content item by UUID. **Auth:** Optional.
      operationId: get_content_v1_contents__content_id__get
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      responses:
        '200':
          description: Content found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentOut"
              examples:
                content:
                  summary: Content example
                  value:
                    id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                    title: 'Episode 1: Origins'
                    description: How it all started.
                    categories:
                    - documentary
                    - motivational
                    language: ar
                    duration: 1800
                    publication_date: '2025-08-01'
                    created_at: '2025-08-14T20:12:44Z'
                    updated_at: '2025-08-14T20:12:44Z'
                    media:
                      id: 2e2e6f0f-2b83-4f1d-8c18-3f6e5b6f7fcd
                      content_id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                      media_type: video
                      source: external
                      media_provider: youtube
                      external_url: https://youtube.com/watch?v=abc123
                      created_at: '2025-08-14T20:12:44Z'
                      updated_at: '2025-08-14T20:12:44Z'
        '404':
          description: Content not found.
          content:
            application/json:
              examples:
                not_found:
                  value:
                    detail: not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/v1/contents/{content_id}/media":
    get:
      tags:
      - media
      summary: Get content media by content ID
      description: Returns the media record (audio/video) for the given content. **Auth:**
        Optional.
      operationId: get_media_v1_contents__content_id__media_get
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      responses:
        '200':
          description: Media found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentMediaOut"
        '404':
          description: Media not found for this content.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    post:
      tags:
      - media
      summary: Create media for a content item (staff only)
      description: Creates a media record (audio/video) for the specified content.
        Media can be uploaded or external (e.g., YouTube). **Auth:** Editors/Admins
        only.
      operationId: create_media_v1_contents__content_id__media_post
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentMediaCreate"
      responses:
        '201':
          description: Media created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentMediaOut"
        '401':
          description: Not authenticated.
        '403':
          description: Authenticated but not authorized (staff required).
        '409':
          description: Media already exists for this content (if unique 1:1).
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    patch:
      tags:
      - media
      summary: Update media for a content item (staff only)
      description: |-
        Partially updates the media record for the specified content.

        **Auth:** Editors/Admins only.

        Only fields provided in the request body are updated.
      operationId: update_media_v1_contents__content_id__media_patch
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentMediaUpdate"
      responses:
        '200':
          description: Media updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentMediaOut"
        '401':
          description: Not authenticated.
        '403':
          description: Authenticated but not authorized (staff required).
        '404':
          description: Media not found for this content.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
      - media
      summary: Delete media for a content item (staff only)
      description: 'Deletes the media associated with the given content. Returns `{
        "ok": true }` on success.'
      operationId: delete_media_v1_contents__content_id__media_delete
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      responses:
        '200':
          description: Deleted.
          content:
            application/json:
              schema: {}
              example:
                ok: true
        '401':
          description: Not authenticated.
        '403':
          description: Authenticated but not authorized (staff required).
        '404':
          description: Media not found for this content.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/v1/import/by-url":
    post:
      tags:
      - import
      summary: Import content by external URL (YouTube, etc.)
      description: |-
        Fetches metadata (and media reference) from a supported external provider and creates/updates the local content entry accordingly.

        **Currently supported:** YouTube.
        Future providers (e.g., SoundCloud, Vimeo) can be plugged in via the Provider Registry.
      operationId: import_by_url_v1_import_by_url_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportUrlIn"
        required: true
      responses:
        '201':
          description: Imported successfully. Returns the created/updated content.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentOut"
              examples:
                youtube_success:
                  summary: Imported from YouTube
                  value:
                    id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                    title: Inside the City â€” Ep. 12
                    description: A deep dive into urban design.
                    category: documentary
                    language: en
                    duration: 1460
                    publication_date: '2025-08-01'
                    created_at: '2025-08-14T22:00:00Z'
                    updated_at: '2025-08-14T22:00:00Z'
                    media:
                      id: 2e2e6f0f-2b83-4f1d-8c18-3f6e5b6f7fcd
                      content_id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                      media_type: video
                      source: external
                      media_provider: youtube
                      external_url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
                      created_at: '2025-08-14T22:00:00Z'
                      updated_at: '2025-08-14T22:00:00Z'
        '400':
          description: Unsupported URL or provider fetch failed.
          content:
            application/json:
              examples:
                unsupported:
                  summary: URL not supported
                  value:
                    detail: Unsupported URL or provider fetch failed
        '401':
          description: Missing/invalid credentials.
          headers:
            WWW-Authenticate:
              description: Authentication scheme (e.g., Bearer).
              schema:
                type: string
          content:
            application/json:
              examples:
                missing:
                  summary: No token
                  value:
                    detail: Not authenticated
                invalid:
                  summary: Bad token
                  value:
                    detail: Could not validate credentials
        '403':
          description: Authenticated but not authorized (staff required).
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    detail: forbidden
        '422':
          description: Request validation error (Pydantic).
      security:
      - OAuth2PasswordBearer: []
  "/v1/discovery/search":
    get:
      tags:
      - discovery
      summary: Search/browse contents
      description: |-
        Fullâ€‘text search over the OpenSearch index with optional filters; results are **hydrated from the CMS** (with cache) before returning.

        **Auth:** Optional â€” unauthenticated users can browse.

        ### Filters
        - `q`: freeâ€‘text query
        - `media_type`: `audio` or `video`
        - `category`, `language`
        - `date_from`, `date_to` (publication date range)
        - Pagination via `limit` and `offset`
      operationId: browse_v1_discovery_search_get
      parameters:
      - name: q
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Fullâ€‘text query.
          title: Q
        description: Fullâ€‘text query.
      - name: media_type
        in: query
        required: false
        schema:
          anyOf:
          - type: string
            pattern: "^(audio|video)$"
          - type: 'null'
          description: Filter by media type.
          title: Media Type
        description: Filter by media type.
      - name: category
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Filter by category (exact match).
          title: Category
        description: Filter by category (exact match).
      - name: language
        in: query
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Filter by language code (e.g., `ar`, `en`).
          title: Language
        description: Filter by language code (e.g., `ar`, `en`).
      - name: date_from
        in: query
        required: false
        schema:
          anyOf:
          - type: string
            format: date
          - type: 'null'
          description: 'Filter: publication date from (inclusive).'
          title: Date From
        description: 'Filter: publication date from (inclusive).'
      - name: date_to
        in: query
        required: false
        schema:
          anyOf:
          - type: string
            format: date
          - type: 'null'
          description: 'Filter: publication date to (inclusive).'
          title: Date To
        description: 'Filter: publication date to (inclusive).'
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          maximum: 100
          minimum: 1
          description: Page size (1â€“100).
          default: 20
          title: Limit
        description: Page size (1â€“100).
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          description: Offset for pagination.
          default: 0
          title: Offset
        description: Offset for pagination.
      responses:
        '200':
          description: List of matching content items.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ContentOut"
                title: Response Browse V1 Discovery Search Get
              examples:
                search_example:
                  summary: Search results
                  value:
                  - id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                    title: City Stories â€” Ep. 12
                    description: A deep dive into urban design.
                    category: documentary
                    language: en
                    duration: 1460
                    publication_date: '2025-08-01'
                    created_at: '2025-08-14T22:00:00Z'
                    updated_at: '2025-08-14T22:05:00Z'
                    media:
                      id: 2e2e6f0f-2b83-4f1d-8c18-3f6e5b6f7fcd
                      content_id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                      media_type: video
                      source: external
                      media_provider: youtube
                      external_url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
                      created_at: '2025-08-14T22:00:00Z'
                      updated_at: '2025-08-14T22:05:00Z'
        '422':
          description: Request validation error (Pydantic).
      x-codeSamples:
      - lang: curl
        label: cURL
        source: curl 'https://api.example.com/v1/discovery/search?q=city&media_type=video&date_from=2025-08-01&limit=10&offset=0'
      - lang: javascript
        label: JavaScript (fetch)
        source: |-
          fetch('https://api.example.com/v1/discovery/search?q=city&language=en&limit=5')
            .then(r => r.json())
            .then(console.log);
  "/v1/discovery/contents/{content_id}":
    get:
      tags:
      - discovery
      summary: Get content by ID (discovery)
      description: |-
        Fetch a single content item by UUID via Discovery. Data is hydrated from CMS and may be served from cache.

        **Auth:** Optional.
      operationId: get_content_v1_discovery_contents__content_id__get
      parameters:
      - name: content_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: Content UUID
          title: Content Id
        description: Content UUID
      responses:
        '200':
          description: Content found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentOut"
              examples:
                content_example:
                  summary: Content example
                  value:
                    id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                    title: City Stories â€” Ep. 12
                    description: A deep dive into urban design.
                    categories:
                    - documentary
                    language: en
                    duration: 1460
                    publication_date: '2025-08-01'
                    created_at: '2025-08-14T22:00:00Z'
                    updated_at: '2025-08-14T22:05:00Z'
                    media:
                      id: 2e2e6f0f-2b83-4f1d-8c18-3f6e5b6f7fcd
                      content_id: 7e6f5a20-5a62-4e25-9b02-8a8af5f1a901
                      media_type: video
                      source: external
                      media_provider: youtube
                      external_url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
                      created_at: '2025-08-14T22:00:00Z'
                      updated_at: '2025-08-14T22:05:00Z'
        '404':
          description: Content not found.
          content:
            application/json:
              examples:
                not_found:
                  value:
                    detail: not found
        '422':
          description: Request validation error (Pydantic).
components:
  schemas:
    AssignRoleIn:
      properties:
        role:
          type: string
          enum:
          - admin
          - editor
          - viewer
          title: Role
      type: object
      required:
      - role
      title: AssignRoleIn
    ContentMediaCreate:
      properties:
        media_type:
          type: string
          enum:
          - audio
          - video
          title: Media Type
        source:
          type: string
          enum:
          - upload
          - external
          title: Source
        media_file:
          anyOf:
          - type: string
          - type: 'null'
          title: Media File
        external_url:
          anyOf:
          - type: string
            maxLength: 2083
            minLength: 1
            format: uri
          - type: 'null'
          title: External Url
        media_provider:
          type: string
          enum:
          - team
          - youtube
          title: Media Provider
          default: team
      type: object
      required:
      - media_type
      - source
      title: ContentMediaCreate
    ContentMediaOut:
      properties:
        media_type:
          type: string
          enum:
          - audio
          - video
          title: Media Type
        source:
          type: string
          enum:
          - upload
          - external
          title: Source
        media_file:
          anyOf:
          - type: string
          - type: 'null'
          title: Media File
        external_url:
          anyOf:
          - type: string
            maxLength: 2083
            minLength: 1
            format: uri
          - type: 'null'
          title: External Url
        media_provider:
          type: string
          enum:
          - team
          - youtube
          title: Media Provider
          default: team
        id:
          type: string
          format: uuid
          title: Id
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
      - media_type
      - source
      - id
      - created_at
      - updated_at
      title: ContentMediaOut
    ContentMediaUpdate:
      properties: {}
      type: object
      title: ContentMediaUpdate
    ContentOut:
      properties:
        title:
          type: string
          maxLength: 255
          minLength: 1
          title: Title
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        language:
          anyOf:
          - type: string
            maxLength: 32
          - type: 'null'
          title: Language
        duration:
          anyOf:
          - type: integer
            minimum: 0
          - type: 'null'
          title: Duration
        publication_date:
          anyOf:
          - type: string
            format: date
          - type: 'null'
          title: Publication Date
        status:
          type: string
          enum:
          - draft
          - ready
          - published
          title: Status
          default: draft
        categories:
          items:
            type: string
          type: array
          title: Categories
          default: []
        id:
          type: string
          format: uuid
          title: Id
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        media:
          "$ref": "#/components/schemas/ContentMediaOut"
      type: object
      required:
      - title
      - id
      - created_at
      - updated_at
      title: ContentOut
    ContentUpdate:
      properties: {}
      type: object
      title: ContentUpdate
      example:
        categories:
        - documentary
        - projects
        description: An updated deep dive into the origins of the project.
        duration: 1820
        language: en
        publication_date: '2025-08-10'
        title: 'Episode 1: Origins (Remastered)'
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    ImportUrlIn:
      properties:
        url:
          type: string
          maxLength: 2083
          minLength: 1
          format: uri
          title: Url
      type: object
      required:
      - url
      title: ImportUrlIn
    LoginIn:
      properties:
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          title: Password
      type: object
      required:
      - email
      - password
      title: LoginIn
    RoleOut:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        name:
          type: string
          enum:
          - admin
          - editor
          - viewer
          title: Name
        created_at:
          type: string
          format: date-time
          title: Created At
      type: object
      required:
      - id
      - name
      - created_at
      title: RoleOut
    TokenOut:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
          default: bearer
      type: object
      required:
      - access_token
      title: TokenOut
    UserCreate:
      properties:
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          title: Password
        roles:
          items:
            type: string
            enum:
            - admin
            - editor
            - viewer
          type: array
          title: Roles
          default:
          - viewer
      type: object
      required:
      - email
      - password
      title: UserCreate
    UserOut:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        email:
          type: string
          format: email
          title: Email
        is_active:
          type: boolean
          title: Is Active
        roles:
          items:
            type: string
            enum:
            - admin
            - editor
            - viewer
          type: array
          title: Roles
        created_at:
          type: string
          format: date-time
          title: Created At
      type: object
      required:
      - id
      - email
      - is_active
      - roles
      - created_at
      title: UserOut
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: "/v1/auth/token"
